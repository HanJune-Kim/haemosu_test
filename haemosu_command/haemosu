#!/usr/bin/env python3
import os, sys
import argparse
import modules
import textwrap
import messages as msg
from datetime import datetime
format_class = argparse.RawDescriptionHelpFormatter

############################
#       base parser        #
############################

#create base argument parser
base_parser = argparse.ArgumentParser(
		prog = 'haemosu',
		add_help = True, 
		formatter_class=argparse.RawDescriptionHelpFormatter,
		description = textwrap.dedent(msg.descriptions.base())
	)
#add base_parser argument
base_parser.add_argument('-r', '--README', action = 'store_true',  help = 'See README')
#print help message with no argument
modules.structure_modules.print_help(base_parser, 1, 0, -1, 'haemosu')

################################
#       base subparser         #
################################

#add subparser to base parser
base_subparser = base_parser.add_subparsers(title = None, description = None, metavar = '')


################################
#     auto-mode subparser      #
################################

#add auto-mode parser to base subparser
auto = base_subparser.add_parser(
		'auto-mode',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.auto_mode())
	)

#add auto-mode arguments
auto.add_argument('-H', '--human', action = 'store_true')
auto.add_argument('-M', '--mouse', action = 'store_true')
auto.add_argument('-n', '--name', type = str, default = "HuMMUS_"+datetime.now().strftime('%Y-%m-%d %H:%M:%S')+'.proj')
auto.add_argument('-i', '--input', type = str, required = True)
auto.add_argument('-o', '--output', type = str, default = './')
auto.add_argument('-t', '--threads', type = int, default = 4)
auto.add_argument('--checkpoint', type = str, default = None)
auto.add_argument('-d', '--detour', default = None, nargs = '+')
###############################
#     manual-mode subparser   #
###############################

#add manual-mode parser to base subparser
manual = base_subparser.add_parser(
		'manual-mode',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.manual_mode())
	)

#print help message with no argument
modules.structure_modules.print_help(manual, 2, 1, -1, 'manual-mode')

###############################
#    trimming subparser       #
###############################

#add trimming parser to base subparser
trimming = base_subparser.add_parser(
		'trimming',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.trimming())
	)

#add trimming arguments
trimming.add_argument('-H', '--human', action = 'store_true')
trimming.add_argument('-M', '--mouse', action = 'store_true')
trimming.add_argument('-i', '--input', type = str, required = True)
trimming.add_argument('--checkpoint', type = str, default = None)
trimming.add_argument('--read-type', type = str, choices = ['PE', 'SE'])
trimming.add_argument('-t', '--threads', type = str, default = 4)
trimming.add_argument('-p', '--phread', type = str, default = 'phred33')
trimming.add_argument('--summary', action = 'store_true')
trimming.add_argument('-o', '--output', type = str, default = 'HuMMUS_trimming')
##############################
# decontamination subparser  #
##############################

#add decontamination parser to base subparser
decontamination = base_subparser.add_parser(
		'decontamination',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.decontamination())
	)

#add decontamination arguments
decontamination.add_argument('-H', '--human', action = 'store_true')
decontamination.add_argument('-M', '--mouse', action = 'store_true')
decontamination.add_argument('-i', '--input', type = str, required = True)
decontamination.add_argument('--checkpoint', type = str, default = None)

##############################
#     kraken2 subparser      #
##############################

#add kraken2 parser to base subparser
kraken2 = base_subparser.add_parser(
		'kraken2',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.kraken2())
	)

#add kraken2 arguments
kraken2.add_argument('-H', '--human', action = 'store_true')
kraken2.add_argument('-M', '--mouse', action = 'store_true')
kraken2.add_argument('-i', '--input', type = str, required = True)
kraken2.add_argument('--checkpoint', type = str, default = None)


#############################
#     diamond2 subparser    #
#############################

#add diamond2 parser to base subparser
diamond2 = base_subparser.add_parser(
		'diamond2',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.diamond2())
	)

#add diamond2 argument
diamond2.add_argument('-H', '--human', action = 'store_true')
diamond2.add_argument('-M', '--mouse', action = 'store_true')
diamond2.add_argument('-i', '--input', type = str, required = True)
diamond2.add_argument('--checkpoint', type = str, default = None)

#############################
# core-diversity subparser  #
#############################

#add diversities parser to base subparser
diversities = base_subparser.add_parser(
		'core-diversity',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.diversities())
	)
#add diversities arguments
#diversities.add_argument()

############################
#     alpha subparser      #
############################

#add alpha parser to base subparser
alpha = base_subparser.add_parser(
		'alpha',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.alpha())
	)
#add alpha arguments
#alpha.add_argument()

############################
#      beta subparser      #
############################
#add beta parser to base subparser
beta = base_subparser.add_parser(
		'beta',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.beta())
	)
#add beta argument
#beta.add_argument()

###########################
# mannwhitneyu subparser  #
###########################

#add mannwhitneyu parser to base subparser
mannwhitneyu = base_subparser.add_parser(
		'mannwhitneyu',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.mannwhitneyu())
	)
#add mannwhitneyu arguments
#mannwhitneyu.add_argument()

###########################
#    ancombc subparser    #
###########################
#add ancombc parser to base subparser
ancombc = base_subparser.add_parser(
		'ancombc',
		formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.ancombc())
	)
#add ancombc arguments
#ancombc.add_arguments()

##########################
#  songbird subparser    #
##########################

#add songbird parser to base subparser
songbird = base_subparser.add_parser(
		'songbird',
	 	formatter_class = format_class,
		description = textwrap.dedent(msg.descriptions.songbird())
	)
#add songbird arguments
#songbird.add_argument()

#activate arguments of base parser as a form of dictionary and add module name to the dictionnary
args = vars(base_parser.parse_args())
try:
	args['module'] = sys.argv[1]
except IndexError:
	pass


#print README.md
(lambda x: print('\n'.join(x)))([i.strip() for i in open('README.md', 'r')]) if args['README'] == True else None

#preserve arguments
with open('args.test', 'w') as f:
	f.write('@Parameters@@auto-mode|')
	for c, kv in enumerate(zip(args.keys(), args.values()), start = 1):
		if c != len(args.keys()): 
			f.write(str(kv[0])+':'+str(kv[1])+'|')
		else:
			f.write(str(kv[0])+':'+str(kv[1]))
f.close()

print(args)	
#list1 = [i.strip() for i in open('args.test', 'r')]
#for i in list1:
#	if i.startswith('@Parameters'):
#		print(i.split('|')[0].split('@@')[-1])
#		dict1 = {k.split(':')[0] : k.split(':')[1] for k in i.split('|')[1:]}


#	dict2 = {'False' : False, 'True':True, 'None': None}
#	for v,k in zip(dict1.values(), dict1.keys()):
#		if v in dict2.keys():
#			dict1[k] = dict2[v]
#	print(dict1)
#	print(args)
#	print(dict1 == args)

##########################
#    Running automode    #
##########################


	
	
